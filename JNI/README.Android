# From Eclipse create a new Android project.
1. Create new "Android Application Project"
2. Fill Application Name with "Test WebM JNI". Project Name will be "TestWebMJNI". Package Name will be "com.example.testwebmjni".
3. [optional] You can change the Minimum required SDK to "API 3:Android 1.5 (Cupcake)".
4. Click Next button on the Configure Project screen.
5. Click Next on the Icon screen.
6. Click Next on the Create Activity screen.
7. Click Finish on the Blank Activity screen.

# Add the JNI code.
8. Create <project>/jni folder.

# Get JNI bindings
9. git clone http://git.chromium.org/webm/bindings.git

# Get libvpx
10. git clone http://git.chromium.org/webm/libvpx.git

# Configure libvpx for Android
11. ./libvpx/configure --target=armv7-android-gcc --disable-examples --sdk-path=<full path to>/<NDK>/android-ndk-r8e/

12. cd bindings/JNI

# Get libwebm
13. git clone http://git.chromium.org/webm/libwebm.git

# Get libogg
14. Download ogg code from http://downloads.xiph.org/releases/ogg/libogg-1.3.0.tar.gz
15. extract to bindings/JNI

# We need to run configure to generate config_types.h.
16. cd libogg-1.3.0 && ./configure && cd ..

# Get libvorbis
17. Download vorbis code from http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.3.tar.gz
18. extract to bindings/JNI

# Get libyuv
19. svn checkout http://libyuv.googlecode.com/svn/trunk/ libyuv-read-only

20. cd ../..

21. Create <project>/jni/Application.mk with the data below:
APP_ABI := armeabi-v7a
APP_OPTIM := release
APP_STL := gnustl_static
APP_CPPFLAGS := -frtti

22. Create <project>/jni/Android.mk with the data below:
WORKING_DIR := $(call my-dir)
BINDINGS_DIR := $(WORKING_DIR)/bindings/JNI
include $(BINDINGS_DIR)/Android.mk

# Build the JNI code.
23. ndk-build

# Copy the java code.
24. cp -R bindings/JNI/com/google ../src/com/

# Adding code to test the bindings.
25. Add load library libvpx.so to your code. e.g.:
static {
  System.loadLibrary("vpx");
}

# Copy sample code.
26. cp bindings/JNI/BindingsSamples.java ../src/com/example/testwebmjni/
27. cp bindings/JNI/WavReader.java ../src/com/example/testwebmjni/
28. Add "package com.example.testwebmjni;" to the top of BindingsSamples.java and WavReader.java.

29. Change MainActivity.java onCreate to:
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  String outStr = "libwebm:" + BindingsSamples.GetLibwebmVersionString();
  TextView tv = new TextView(this);
  tv.setText(outStr);
  setContentView(tv);
}

30. Run the app. You should see libwebm version output.

# Test encoding audio and video
31. Copy raw I420 y4m file and a Raw PCM Wav file to ExternalStorage on the device.

32. Add "<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />" to AndroidManifest.xml.

33. Change MainActivity.java onCreate to:
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  String outStr = "libwebm:" + BindingsSamples.GetLibwebmVersionString();
  String storageDir = Environment.getExternalStorageDirectory().getAbsolutePath();
  String inputVideo = storageDir + "io_320x180.y4m";
  String inputAudio = storageDir + "io_44100.wav";
  String outputWebM = storageDir + "/testjni.webm";
  outStr += "\n" + BindingsSamples.audioVideoEncodeSample(inputVideo, inputAudio, outputWebM, 200);
  TextView tv = new TextView(this);
  tv.setText(outStr);
  setContentView(tv);
}

34. Run the app. You should see libwebm version output and "Success!".
35. Playback "testjni.webm" on the device.
